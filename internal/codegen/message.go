/*
   Copyright 2022 Splunk Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package codegen

import (
	"cd.splunkdev.com/kanantheswaran/protobuf-jsonnet/internal/model"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/pluginpb"
)

// messageTemplate is the code gen template for a protobuf message.
var messageTemplate = templateFor(`
// Message type: {{.QualifiedName}}
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.
{{$root := .}}
local type = '{{$root.QualifiedName}}';
local generator = import '../generator.libsonnet';
local fields = {{json .FieldMeta}};
local oneOfs = {{json .OneOfs}};
local validator = generator(type, fields, oneOfs);	

{
	definition: {
		{{- range .NestedEnums}}
			{{.Name}}:: (import '{{fileNameForType .}}.libsonnet').definition,
		{{- end}}
		{{- range .NestedMessages}}
			{{.Name}}:: (import '{{fileNameForType .}}.libsonnet').definition,
		{{- end}}

		// methods
		_new:: function(partialObject={}) (
		  local obj = if std.type(partialObject) != 'object' then error 'expected object for _new invocation of %s' % type else partialObject;
		  validator.validatePartial(obj + self)
		),
		_validate:: function () validator.validateAll(self),
		_normalize:: function (kind='') validator.normalizeAll(self, kind),
		{{- range .Fields}}
			{{.SetterName}}:: function (val) validator.validateField(self + { '{{.Name}}': val }, '{{.Name}}', type + '.{{.SetterName}}'),
		{{- end}}
	},
	validator:: validator.validateAll,
	normalizer: validator.normalizeAll,
}
`)

func (c *CodeGenerator) generateMessage(m *model.Message) *pluginpb.CodeGeneratorResponse_File {
	content := mustGenerateJsonnet(messageTemplate, m)
	return &pluginpb.CodeGeneratorResponse_File{
		Name:    proto.String(pkgPath + "/" + filePathForType(m) + ".libsonnet"),
		Content: proto.String(content),
	}
}
