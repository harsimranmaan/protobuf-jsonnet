/*
   Copyright 2022 Splunk Inc.

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/

package codegen

import (
	"cd.splunkdev.com/kanantheswaran/protobuf-jsonnet/internal/model"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/pluginpb"
)

// enumTemplate is the code gen template for an enum type
var enumTemplate = templateFor(`
// Enum type: {{.QualifiedName}}
// Definition generated by protoc-gen-jsonnet. DO NOT EDIT.
local type = '{{.QualifiedName}}';
local map = {{ json .Map }};

local reverseMap = {{ json .ReverseMap }};

local validator = function (input, ctx='') (
	local context = if ctx == '' then type else ctx;
	local v = std.toString(input);
	if std.objectHas(map, v) || std.objectHas(reverseMap,v)
	then input
	else error '%s: invalid value %s for enum %s' % [ context, v, type ]
);

{
	definition: map + { 
		_new:: function (obj={}) error '%s: the _new method may not be used on enum types' % '{{.QualifiedName}}',
		_validate:: validator,
	}, 
	validator:: validator,
}
`)

// generateEnum generates code for an enum type.
func (c *CodeGenerator) generateEnum(e *model.Enum) *pluginpb.CodeGeneratorResponse_File {
	content := mustGenerateJsonnet(enumTemplate, e)
	return &pluginpb.CodeGeneratorResponse_File{
		Name:    proto.String(pkgPath + "/" + filePathForType(e) + ".libsonnet"),
		Content: proto.String(content),
	}
}
